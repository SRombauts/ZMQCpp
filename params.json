{"name":"Zmqcpp","tagline":"ZMQC++ (ZMQCpp) is a thin C++ wrapper around the ØMQ messaging library.","body":"### About ZeroMQ:\r\n\r\nThe socket library that acts as a concurrency framework.\r\nCarries messages across inproc, IPC, TCP, and multicast.\r\nAsynch I/O for scalable multicore message-passing apps.\r\nLGPL free software with static linking exception.\r\nhttp://www.zeromq.org/\r\n\r\n### About ZMQC++:\r\n\r\nZMQC++ offers an encapsulation arround the native C APIs of libzmq,\r\nwith a few intuitive and well documented C++ class.\r\n\r\n### The goals of ZMQC++ are:\r\n\r\n- to offer the best of existing simple C++ libzmq wrappers\r\n- to be elegantly written with good C++ design, STL, exceptions and RAII idiom\r\n- to keep dependencies to a minimum (STL and libzmq, optionnal Boost)\r\n- to be portable\r\n- to be light and fast\r\n- to be thread-safe\r\n- to have a good unit test coverage\r\n- to use API names sticking with those of the zmq library (except frame vs message for multi-part message)\r\n- to be well documented with Doxygen tags, and with some good examples\r\n- to be well maintained\r\n- to use a permissive MIT license, similar to BSD or Boost, for proprietary/commercial usage\r\n\r\nIt is designed using the Resource Acquisition Is Initialization (RAII) idom\r\n(see http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization),\r\nand throwing exceptions in case of ZeroMQ errors (exept in destructors,\r\nwhere assert() are used instead).\r\nEach ZMQC++ object must be constructed with a valid ZeroMQ context or socket,\r\nand then is always valid until destroyed.\r\n\r\n### Suported platforms:\r\n\r\nDevelopements and tests are done under the following OSs :\r\n- Debian 7 (testing)\r\n- Ubuntu 12.10\r\n- Windows XP/7/8\r\nAnd following IDEs/Compilers\r\n- GCC 4.7.x with a provided Makefile\r\n- Eclipse CDT under Linux, using the provided Makefile\r\n- Visual Studio Express 2008/2010/2012 for testing compatibility purpose\r\n\r\n### Dependencies:\r\n\r\n- a STL implementation (even an old one, like those provided with VC6/eVC4 should work)\r\n- exception support (the class Exception inherit from std::runtime_error)\r\n- the zmq library, either by linking to it dynamicaly or staticaly (libzmq-dev under Linux).\r\n\r\n### Installation\r\n\r\nTo use this wrappers, you need to add the ZMQC++ source files from the src/ directory\r\nin your project code base, and compile/link against the zmq library.\r\n\r\n### License\r\n\r\nCopyright (c) 2013 Sébastien Rombauts (sebastien.rombauts@gmail.com)\r\n\r\nDistributed under the MIT License (MIT) (See accompanying file LICENSE.txt\r\nor copy at http://opensource.org/licenses/MIT)\r\n\r\n## Getting started\r\n### First sample demonstrates how to initialize a context, create a socket and bind/connect it:\r\n```C++\r\n// TODO\r\n```\r\n\r\n## How to contribute\r\n### GitHub website\r\nThe most efficient way to help and contribute to this wrapper project is to\r\nuse the tools provided by GitHub:\r\n- please fill bug reports and feature requests here: https://github.com/SRombauts/ZMQCpp/issues\r\n- fork the repository, make some small changes and submit them with pull-request\r\n\r\n### Contact\r\nYou can also email me directly, I will answer any questions and requests.\r\n\r\n### Coding Style Guidelines\r\nThe source code use the CamelCase naming style variant where :\r\n- type names (class, struct, typedef, enums...) begins with a capital letter\r\n- files (.cpp/.h) are named like the class they contains\r\n- function and variable names begins with a lower case letter\r\n- member variables begins with a 'm', function arguments begins with a 'a', boolean with a 'b', pointers with a 'p'\r\n- each file, class, method and member variable is documented using Doxygen tags\r\nSee also http://www.appinf.com/download/CppCodingStyleGuide.pdf for good guidelines\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}